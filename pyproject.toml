[tool.poetry]
name = "paasify"
version = "0.1.2"
description = "Paasify your docker-compose files"
authors = ["MrJK"]
license = "Apache License"
readme = "README.md"
homepage = "https://github.com/barbu-it/paasify"
repository = "https://github.com/barbu-it/paasify"
keywords = ["paasify", "docker", "docker-compose", "jsonnet"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Programming Language :: Python :: 3",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved",
    "Topic :: Software Development",
    "Topic :: Utilities",
]

include = [
    "README.md",
    "CHANGELOG.md",
    { path = "paasify_assets", format = ["sdist", "wheel"] },
]

packages = [
    { include = "paasify" },

    # Temporary until cafram is released
    { include = "cafram", from = "cafram/"},
]


# Project configuration
# ==================

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
paasify = "paasify.cli:app"

# Dependencies
# ==================

[tool.poetry.dependencies]
python = "^3.8"

sh = "^1.14.3"
anyconfig = "^0.13.0"
ruamel-yaml = "^0.17.21"
jsonschema = "^4.17.0"
jsonnet = "^0.19.1"
giturlparse = "^0.10.0"
semver = "^2.13.0"
single-version = "^1.5.1"
pyaml = "^21.10.1"
typer = "^0.7.0"
json-schema-for-humans = "^0.44"
rich = "^13.3.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
commitizen = "^2.37.0"
pylint = "^2.15.6"
black = "^22.10.0"
pytest-regressions = "^2.4.1"
pytest-coverage = "^0.0"
pytest-clarity = "^1.0.1"
flake8 = "^5.0.4"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mike = "^1.1.2"
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
mkdocs-material = "^8.5.10"
mkdocs-schema-reader = "^0.11.1"
mkdocs-jupyter = "^0.22.0"
mkdocs-literate-nav = "^0.5.0"
bash-kernel = "^0.8.0"
jupyter = "^1.0.0"


#
#  [tool.poetry.group.dev.dependencies]
#  poetry = "^1.2.2"
#
#  python-semantic-release = "^7.32.2"
#  poetry-bumpversion = "^0.3.0"
#  pre-commit = "^2.20.0"
#  commitizen = "^2.37.0"
#
#  pylint = "^2.15.3"
#  black = "^22.8.0"
#  pytest-regressions = "^2.4.1"
#  pytest-clarity = "^1.0.1"
#  pytest-coverage = "^0.0"
#
#
#  [tool.poetry.group.doc.dependencies]
#
#  mkdocs = "^1.4.0"
#  mike = {git = "https://github.com/jimporter/mike", rev = "master"}
#  mkdocstrings = {extras = ["python"], version = "^0.19.0"}
#
#  mkdocs-material = "^8.5.6"
#  mkdocs-schema-reader = "^0.11.1"
#  mkdocs-jupyter = "^0.22.0"
#  mkdocs-literate-nav = "^0.5.0"
#
#  jupyter = "^1.0.0"
#  nbconvert = "^6.0.0"
#  bash_kernel = "^0.8.0"
#
#  json-schema-for-humans = "^0.41.8"


# Tools configuration
# ==================

# Doc: https://github.com/monim67/poetry-bumpversion

[tool.poetry.group.documentation.dependencies]
mkdocs-simple-hooks = "^0.1.5"
mkdocs-exclude-search = "^0.6.4"

[tool.poetry_bumpversion.file."paasify/version.py"]


# Doc: https://python-semantic-release.readthedocs.io/en/latest/automatic-releases/github-actions.html
[tool.semantic_release]

# Files
version_variable = [
    "paasify/version.py:^__version__",
]
version_toml = [
    'pyproject.toml:tool.poetry.version',
]

# Main config
major_on_zero = true
version_source = "commit"
branch = "main"

# Pattern that will be looked up in all commit that bumped things
commit_version_number = true
commit_subject = "bump: version v{version}"   # NEVER CHANGE THIS ONCE SET
commit_message = "semantic-release new version: version {version}" # NEVER CHANGE THIS ONCE SET

# Tag management
tag_commit = false # By default, we don not tag, unless explicitely set
tag_format = "v{version}" # NEVER CHANGE THIS ONCE SET

# Pipeline hooks
pre_commit_command = "task release_changelog"
include_additional_files = 'VERSION_NOTES.md'

# Changelog
changelog_file = "CHANGELOG.md"
commit_parser = 'semantic_release.history.angular_parser'
# commit_parser = 'semantic_release.history.scipy_parser'

# Run build ?
build_command = false

# Disable extra functionnalities
upload_to_release = false # We use scripts/publish_github.sh
ignore_token_for_push = true  # We use scripts/publish_github.sh
upload_to_repository = false # Disable wheel upload, we use poetry publish
upload_to_pypi = false # Disable wheel upload, we use poetry publish


[tool.pytest.ini_options]
log_cli = true
#log_cli_level = "DEBUG"
log_cli_level = "NOTSET"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
